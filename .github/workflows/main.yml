name: CI Tests
on:
  push:
    branches:
      - main
    paths-ignore:
      - 'examples/**'
      - 'README.md'
      - 'CHANGELOG.md'
      - 'LICENSE*'
  pull_request:
    branches:
      - main
    paths-ignore:
      - 'examples/**'
      - 'README.md'
      - 'CHANGELOG.md'
      - 'LICENSE*'
  workflow_dispatch:

jobs:
  code_quality_check:
    strategy:
      fail-fast: false
      matrix:
        features:
          - "rustcrypto,rustls-tls,async-compat"
          - "openssl,native-tls,async-compat"
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout"
        uses: actions/checkout@v3
        
      - name: "Check for compiler errors"
        run: cargo check --no-default-features --features ${{ matrix.features }}
          
      - name: "Run linter"
        run: cargo clippy --no-default-features --features ${{ matrix.features }} -- -D warnings

  formatting_check:
    needs: code_quality_check
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout"
        uses: actions/checkout@v3

      - name: "Install the nightly Rust toolchain"
        run: rustup toolchain install nightly -c rustfmt

      - name: "Check formatting"
        run: cargo +nightly fmt --check

  dependancy_check:
    needs: formatting_check
    strategy:
      fail-fast: false
      matrix:
        features:
          - "rustcrypto,rustls-tls,async-compat"
          - "openssl,native-tls"
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout"
        uses: actions/checkout@v3

      - name: "Install cargo-deny tool"
        run: cargo install cargo-deny

      - name: "Check dependancies"
        run: cargo deny --no-default-features --features ${{ matrix.features }} check
          
  test_suite:
    needs: [code_quality_check, formatting_check]
    strategy:
      fail-fast: false
      matrix:
        features: 
          - "rustcrypto,rustls-tls,async-compat"
          - "rustcrypto,rustls-tls"
          - "openssl,native-tls,async-compat"
          - "openssl,native-tls"
          - "openssl-vendored,native-tls-vendored,async-compat"
          - "openssl-vendored,native-tls-vendored"
    runs-on: ubuntu-latest
    env:
      INTERACTSHRS_TEST_LOCAL_SERVER_TOKEN: ${{ secrets.LOCAL_SERVER_TOKEN }}
      INTERACTSHRS_TEST_LOCAL_SERVER_FQDN: ${{ secrets.LOCAL_SERVER_FQDN }}
      INTERACTSHRS_TEST_LOCAL_SERVER_DNS_OVERRIDE_ADDR: "127.0.0.1"
      INTERACTSHRS_TEST_PROXY_ADDR: "127.0.0.1"
      INTERACTSHRS_TEST_PROXY_PORT: "3128"
      INTERACTSHRS_TEST_CERT_SUBJ: ${{ secrets.CERT_SUBJECT_LINE }}
    # services:
    #   local_server:
    #     image: ghcr.io/pyroraptor07/interactsh-local-test-server:main
    #     credentials:
    #       username: ${{ github.actor }}
    #       password: ${{ secrets.DOCKER_REPO_TOKEN }}
    #     env:
    #       RUST_TEST_HOSTNAME: ${{ secrets.LOCAL_SERVER_FQDN }}
    #       RUST_TEST_AUTH_TOKEN: ${{ secrets.LOCAL_SERVER_TOKEN }}
    #       RUST_TEST_CERT_SUBJ: ${{ secrets.CERT_SUBJECT_LINE }}
    #     ports:
    #       - 80:80
    #       - 443:443

    steps:
      - name: "Checkout"
        uses: actions/checkout@v3

      - name: "Start proxy server"
        run: docker-compose --file ./docker/squid/docker-compose.yml up -d

      - name: "Start local Interactsh server"
        run: docker-compose --file ./docker/local_server/docker-compose.yml up -d
          
      - name: "Run tests"
        run: cargo test --no-default-features --features ${{ matrix.features }} --no-fail-fast

      - name: "Stop proxy server"
        run: docker-compose --file ./docker/squid/docker-compose.yml down

      - name: "Stop local Interactsh server"
        run: docker-compose --file ./docker/local_server/docker-compose.yml down
        
  os_compat_nix:
    needs: test_suite
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        features: 
          - "rustcrypto,rustls-tls,async-compat"
          - "rustcrypto,rustls-tls"
          - "openssl,native-tls,async-compat"
          - "openssl,native-tls"
          - "openssl-vendored,native-tls-vendored,async-compat"
          - "openssl-vendored,native-tls-vendored"
    runs-on: ${{ matrix.os }}
    steps:
      - name: "Checkout"
        uses: actions/checkout@v3
          
      - name: "Run HTTP test"
        run: cargo test --no-default-features --features ${{ matrix.features }} --no-fail-fast http_logs_from_pub

  os_compat_win-msvc:
    needs: test_suite
    strategy:
      fail-fast: false
      matrix:
        features: 
          - "rustcrypto,rustls-tls,async-compat"
          - "rustcrypto,rustls-tls"
    runs-on: windows-latest
    steps:
      - name: "Checkout"
        uses: actions/checkout@v3
          
      - name: "Run HTTP test"
        run: cargo test --no-default-features --features ${{ matrix.features }} --no-fail-fast http_logs_from_pub

  os_compat_win_gnu:
    needs: test_suite
    strategy:
      fail-fast: false
      matrix:
        features: 
          - "rustcrypto,rustls-tls,async-compat"
          - "rustcrypto,rustls-tls"
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - name: Setup MSYS2 environment and MinGW+Rust toolchain
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: >-
            git
            base-devel
            pkg-config
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-rust
        
      - name: "Checkout"
        uses: actions/checkout@v3
          
      - name: "Run HTTP test"
        run: cargo test --no-default-features --features ${{ matrix.features }} --no-fail-fast http_logs_from_pub --target x86_64-pc-windows-gnu

  os_compat_win-msvc_openssl:
    needs: test_suite
    strategy:
      fail-fast: false
      matrix:
        features: 
          - "openssl,native-tls,async-compat"
          - "openssl,native-tls"
          - "openssl-vendored,native-tls-vendored,async-compat"
          - "openssl-vendored,native-tls-vendored"
    runs-on: windows-latest
    steps:
      - name: "Install OpenSSL"
        run: |
          vcpkg install openssl:x64-windows-static
          vcpkg integrate install

      - name: "Checkout"
        uses: actions/checkout@v3
          
      - name: "Run HTTP test"
        run: cargo test --no-default-features --features ${{ matrix.features }} --no-fail-fast http_logs_from_pub
        env:
          OPENSSL_DIR: 'C:\vcpkg\installed\x64-windows-static'

  os_compat_win_gnu_openssl:
    needs: test_suite
    strategy:
      fail-fast: false
      matrix:
        features: 
          - "openssl,native-tls,async-compat"
          - "openssl,native-tls"
          - "openssl-vendored,native-tls-vendored,async-compat"
          - "openssl-vendored,native-tls-vendored"
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - name: Setup MSYS2 environment and MinGW+Rust toolchain
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: >-
            git
            base-devel
            openssl-devel
            pkg-config
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-rust
        
      - name: "Checkout"
        uses: actions/checkout@v3
          
      - name: "Run HTTP test"
        run: cargo test --no-default-features --features ${{ matrix.features }} --no-fail-fast http_logs_from_pub --target x86_64-pc-windows-gnu
